---
export interface Props {
  images: {
    src: string;
    alt: string;
  }[];
  title?: string;
  subtitle?: string;
  id?: string;
}

const { images, title, subtitle, id = 'carousel' } = Astro.props;
---

<section class="py-4 lg:py-6" id={id}>
  <div class="max-w-full mx-auto px-4 sm:px-6">
    {title && (
      <div class="text-center mb-10">
        <h2 class="text-3xl md:text-4xl font-bold tracking-tight">{title}</h2>
        {subtitle && (
          <p class="mt-4 text-xl text-muted dark:text-slate-400">{subtitle}</p>
        )}
      </div>
    )}

    <div class="relative">
      <!-- Carousel Container -->
      <div class="overflow-hidden rounded-lg">
        <div 
          class="flex transition-transform duration-500 ease-in-out" 
          id={`carousel-track-${id}`}
        >
          {images.map((image, index) => (
            <div class="w-1/2 flex-shrink-0 px-6">
              <img
                src={image.src}
                alt={image.alt}
                class="w-full h-auto object-contain max-h-[500px] mx-auto rounded-lg shadow-lg"
                loading={index === 0 ? 'eager' : 'lazy'}
              />
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Arrows -->
      {images.length > 1 && (
        <>
          <button
            class="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white dark:bg-slate-800 text-gray-800 dark:text-white p-3 rounded-full shadow-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 z-10"
            id={`prev-${id}`}
            aria-label="Previous image"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
          </button>

          <button
            class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white dark:bg-slate-800 text-gray-800 dark:text-white p-3 rounded-full shadow-lg hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 z-10"
            id={`next-${id}`}
            aria-label="Next image"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </>
      )}

      <!-- Dots Indicator -->
      {images.length > 1 && (
        <div class="flex justify-center mt-6 space-x-2">
          {images.map((_, index) => (
            <button
              class="w-3 h-3 rounded-full bg-gray-300 dark:bg-slate-600 hover:bg-gray-400 dark:hover:bg-slate-500 transition-colors focus:outline-none"
              data-index={index}
              id={`dot-${id}-${index}`}
              aria-label={`Go to image ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>

    <!-- Image Counter -->
    {images.length > 1 && (
      <div class="text-center mt-4">
        <span class="text-sm text-muted dark:text-slate-400" id={`counter-${id}`}>
          1 / {images.length}
        </span>
      </div>
    )}
  </div>
</section>

<script define:vars={{ id, imagesLength: images.length }}>
  if (imagesLength > 1) {
    const track = document.getElementById(`carousel-track-${id}`);
    const prevBtn = document.getElementById(`prev-${id}`);
    const nextBtn = document.getElementById(`next-${id}`);
    const counter = document.getElementById(`counter-${id}`);
    const dots = Array.from(document.querySelectorAll(`[id^="dot-${id}-"]`));
    const carousel = document.getElementById(id);
    
    let currentIndex = 0;
    let autoPlayInterval;
    const autoPlayDelay = 4000; // 4 seconds

    function updateCarousel() {
      // With 50% width images, we need to move 50% each time
      // Start at -25% to center the first image and show partial previous/next
      const translateX = -25 - (currentIndex * 50);
      track.style.transform = `translateX(${translateX}%)`;
      
      // Update counter
      if (counter) {
        counter.textContent = `${currentIndex + 1} / ${imagesLength}`;
      }
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.remove('bg-gray-300', 'dark:bg-slate-600');
          dot.classList.add('bg-primary');
        } else {
          dot.classList.remove('bg-primary');
          dot.classList.add('bg-gray-300', 'dark:bg-slate-600');
        }
      });
    }

    function nextImage() {
      currentIndex = (currentIndex + 1) % imagesLength;
      updateCarousel();
    }

    function prevImage() {
      currentIndex = (currentIndex - 1 + imagesLength) % imagesLength;
      updateCarousel();
    }

    function goToImage(index) {
      currentIndex = index;
      updateCarousel();
    }

    function startAutoPlay() {
      autoPlayInterval = setInterval(nextImage, autoPlayDelay);
    }

    function stopAutoPlay() {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
        autoPlayInterval = null;
      }
    }

    function resetAutoPlay() {
      stopAutoPlay();
      startAutoPlay();
    }

    // Event listeners
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        nextImage();
        resetAutoPlay();
      });
    }
    
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        prevImage();
        resetAutoPlay();
      });
    }
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToImage(index);
        resetAutoPlay();
      });
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') {
        nextImage();
        resetAutoPlay();
      }
      if (e.key === 'ArrowLeft') {
        prevImage();
        resetAutoPlay();
      }
    });

    // Pause auto-play on hover, resume on leave
    if (carousel) {
      carousel.addEventListener('mouseenter', stopAutoPlay);
      carousel.addEventListener('mouseleave', startAutoPlay);
    }

    // Initialize
    updateCarousel();
    startAutoPlay();
  }
</script>

<style>
  /* Ensure smooth transitions */
  #carousel-track-* {
    transition: transform 0.5s ease-in-out;
  }
  
  /* Hide scrollbar */
  .overflow-hidden {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .overflow-hidden::-webkit-scrollbar {
    display: none;
  }
</style> 